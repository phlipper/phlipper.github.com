<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | phlipper's (dot) net]]></title>
  <link href="http://phlippers.net/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://phlippers.net/"/>
  <updated>2012-07-25T23:30:49-07:00</updated>
  <id>http://phlippers.net/</id>
  <author>
    <name><![CDATA[Phil Cohen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Upgrading to Mountain Lion - Ruby + MacPorts]]></title>
    <link href="http://phlippers.net/blog/2012/07/25/upgrading-to-mountain-lion-ruby-plus-macports/"/>
    <updated>2012-07-25T23:25:00-07:00</updated>
    <id>http://phlippers.net/blog/2012/07/25/upgrading-to-mountain-lion-ruby-plus-macports</id>
    <content type="html"><![CDATA[<p>My colleague Kenny Johnston wrote a nice piece about <a href="http://coderwall.com/p/dtbuqg">Upgrading to Mountain Lion</a> with an emphasis on using Homebrew. Here are the relevant steps using MacPorts:</p>

<h2>XCode:</h2>

<ul>
<li>Update to the latest XCode 4.4 from the App Store</li>
<li>Install the Command Line Tools</li>
</ul>


<p>Of course, since it is zero-day, there was an issue fetching the Command Line Tools from the server and I had to install manually from a <code>.pkg</code> file retrieved from the Apple Developer Portal. If you install the CLI tools package manually, you may need to run the following:</p>

<pre><code>sudo xcodebuild -license
</code></pre>

<p>That is required to accept the license terms system-wide.</p>

<h2>MacPorts</h2>

<p>First, you'll need to update the base MacPorts installation:</p>

<pre><code>sudo port -v selfupdate
</code></pre>

<p>If you run in to a compilation error, you may need to edit the file <code>/opt/local/etc/macports/macports.conf</code> and set the <code>developer_dir</code> option to be empty:</p>

<pre><code>sudo vim /opt/local/etc/macports/macports.conf
</code></pre>

<p>```bash /opt/local/etc/macports/macports.conf</p>

<h1>Directory containing Xcode Tools (default is to ask xcode-select)</h1>

<h1>developer_dir       /Developer</h1>

<p>developer_dir
```</p>

<p>You should now be able to update any outdated ports (grab a beverage while you wait):</p>

<pre><code>sudo port -vu upgrade outdated
</code></pre>

<h2>GCC 4.2</h2>

<p>Now install the <code>apple-gcc42</code> port to replace the missing GCC 4.2 in Mountain Lion:</p>

<pre><code>sudo port install -vu apple-gcc42
</code></pre>

<p>Once that has been installed, you will need to link it to the expected system location:</p>

<pre><code>sudo ln -s /opt/local/bin/gcc-apple-4.2 /usr/bin/gcc-4.2
</code></pre>

<h2>RVM</h2>

<p>Make sure you have the latest RVM version installed:</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable
</code></pre>

<p>You should now ensure that you can rebuild your installed Ruby versions:</p>

<pre><code>rvm reinstall 1.9.3
rvm reinstall rbx
...
</code></pre>

<p>You may need to reference my earlier tip: <a href="http://phlippers.net/blog/2012/07/10/fix-ruby-1-dot-9-x-openssl-segfault-on-os-x/">Fix Ruby 1.9.x OpenSSL Segfault on OS X</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL gem 2.7 with Ruby 1.8.7 and MacPorts]]></title>
    <link href="http://phlippers.net/blog/2012/07/12/mysql-gem-2-dot-7-with-ruby-1-dot-8-7-and-macports/"/>
    <updated>2012-07-12T13:37:00-07:00</updated>
    <id>http://phlippers.net/blog/2012/07/12/mysql-gem-2-dot-7-with-ruby-1-dot-8-7-and-macports</id>
    <content type="html"><![CDATA[<p>I recently had to reinstall the <code>mysql</code> gem version 2.7 in to following environment:</p>

<ul>
<li>Ruby 1.8.7</li>
<li>OS X 10.7</li>
<li>MacPorts MySQL 5</li>
</ul>


<p>I needed to look up this incantation for the Nth time so I am recording it here:</p>

<p><code>bash gem install
env ARCHFLAGS="-arch x86_64" gem install mysql -v 2.7 -- --with-mysql-config=/opt/local/lib/mysql5/bin/mysql_config
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Ruby 1.9.x OpenSSL Segfault on OS X]]></title>
    <link href="http://phlippers.net/blog/2012/07/10/fix-ruby-1-dot-9-x-openssl-segfault-on-os-x/"/>
    <updated>2012-07-10T22:37:00-07:00</updated>
    <id>http://phlippers.net/blog/2012/07/10/fix-ruby-1-dot-9-x-openssl-segfault-on-os-x</id>
    <content type="html"><![CDATA[<p>If you install Ruby 1.9.2 or 1.9.3 on OS X, you may run in to the dreaded OpenSSL segfault:</p>

<pre><code>~/ruby-1.9.3-p194/lib/ruby/1.9.1/net/http.rb:799: [BUG] Segmentation fault
ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-darwin11.4.0]
</code></pre>

<p>The version of OpenSSL that ships with OS X 10.6 and 10.7 is older and causes this issue.</p>

<p>There are a number of options solve this. Here a few:</p>

<p><strong>MacPorts</strong></p>

<pre><code>$ port selfupdate
$ port install openssl
$ port install libyaml

# RVM
$ rvm install 1.9.3 --with-openssl-dir=/opt/local --with-opt-dir=/opt/local

# rbenv
$ CONFIGURE_OPTS='--with-openssl-dir=/opt/local --with-opt-dir=/opt/local' rbenv install 1.9.3-p194
</code></pre>

<p><strong>Homebrew</strong></p>

<pre><code>$ brew update
$ brew install openssl

# RVM
$ rvm install 1.9.3 --with-openssl-dir=`brew --prefix openssl`

# rbenv
$ CONFIGURE_OPTS="--with-openssl-dir=`brew --prefix openssl`" rbenv install 1.9.3-p194
</code></pre>

<p><strong>RVM</strong></p>

<pre><code>$ rvm pkg install openssl
$ rvm reinstall 1.9.3 --with-openssl-dir=$rvm_path/usr
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improved concurrency for Heroku Dynos]]></title>
    <link href="http://phlippers.net/blog/2012/07/03/improved-concurrency-for-heroku-dynos/"/>
    <updated>2012-07-03T10:34:00-07:00</updated>
    <id>http://phlippers.net/blog/2012/07/03/improved-concurrency-for-heroku-dynos</id>
    <content type="html"><![CDATA[<p>A Rack application running on <a href="http://heroku.com">Heroku</a> can improve performance by using different application servers with different performance characteristics.</p>

<p>Some good choices include <a href="http://code.macournoyer.com/thin/">Thin</a> (evented I/O), <a href="http://unicorn.bogomips.org/">Unicorn</a> (multi-process) and <a href="http://puma.io/">Puma</a> (multi-threaded).</p>

<p>The exact configuration settings will vary by application and how much memory each app takes. A default Rails app with a basic scaffold can easily support 4 unicorn workers or 4 puma threads. A small Sinatra app can support several times that number.</p>

<p>Here are the <code>Procfile</code> settings you can use for each:</p>

<p>```ruby Procfile</p>

<h1>thin</h1>

<p>web: bundle exec thin -p $PORT -e $RACK_ENV start</p>

<h1>puma</h1>

<p>web: bundle exec puma -t 1:4 -b tcp://0.0.0.0:$PORT</p>

<h1>unicorn</h1>

<p>web: bundle exec unicorn -p $PORT -c ./config/unicorn.rb
```</p>

<p>Use the <a href="https://addons.heroku.com/newrelic">New Relic RPM Add-on</a> to monitor your application resources.</p>
]]></content>
  </entry>
  
</feed>
